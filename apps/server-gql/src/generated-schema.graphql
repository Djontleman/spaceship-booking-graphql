# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateJourney {
  _count: JourneyCountAggregate
  _max: JourneyMaxAggregate
  _min: JourneyMinAggregate
}

type Journey {
  destination: String!
  id: String!
  origin: String!
}

type JourneyCountAggregate {
  _all: Int!
  destination: Int!
  id: Int!
  origin: Int!
}

input JourneyCountOrderByAggregateInput {
  destination: SortOrder
  id: SortOrder
  origin: SortOrder
}

input JourneyCreateInput {
  destination: String!
  id: String
  origin: String!
}

type JourneyGroupBy {
  _count: JourneyCountAggregate
  _max: JourneyMaxAggregate
  _min: JourneyMinAggregate
  destination: String!
  id: String!
  origin: String!
}

type JourneyMaxAggregate {
  destination: String
  id: String
  origin: String
}

input JourneyMaxOrderByAggregateInput {
  destination: SortOrder
  id: SortOrder
  origin: SortOrder
}

type JourneyMinAggregate {
  destination: String
  id: String
  origin: String
}

input JourneyMinOrderByAggregateInput {
  destination: SortOrder
  id: SortOrder
  origin: SortOrder
}

input JourneyOrderByWithAggregationInput {
  _count: JourneyCountOrderByAggregateInput
  _max: JourneyMaxOrderByAggregateInput
  _min: JourneyMinOrderByAggregateInput
  destination: SortOrder
  id: SortOrder
  origin: SortOrder
}

input JourneyOrderByWithRelationInput {
  destination: SortOrder
  id: SortOrder
  origin: SortOrder
}

enum JourneyScalarFieldEnum {
  destination
  id
  origin
}

input JourneyScalarWhereWithAggregatesInput {
  AND: [JourneyScalarWhereWithAggregatesInput!]
  NOT: [JourneyScalarWhereWithAggregatesInput!]
  OR: [JourneyScalarWhereWithAggregatesInput!]
  destination: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  origin: StringWithAggregatesFilter
}

input JourneyUpdateInput {
  destination: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  origin: StringFieldUpdateOperationsInput
}

input JourneyUpdateManyMutationInput {
  destination: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  origin: StringFieldUpdateOperationsInput
}

input JourneyWhereInput {
  AND: [JourneyWhereInput!]
  NOT: [JourneyWhereInput!]
  OR: [JourneyWhereInput!]
  destination: StringFilter
  id: StringFilter
  origin: StringFilter
}

input JourneyWhereUniqueInput {
  destination: String
  id: String
  origin: String
}

type Mutation {
  createOneJourney(data: JourneyCreateInput!): Journey!
  deleteManyJourney(where: JourneyWhereInput): AffectedRowsOutput!
  deleteOneJourney(where: JourneyWhereUniqueInput!): Journey
  updateManyJourney(data: JourneyUpdateManyMutationInput!, where: JourneyWhereInput): AffectedRowsOutput!
  updateOneJourney(data: JourneyUpdateInput!, where: JourneyWhereUniqueInput!): Journey
  upsertOneJourney(create: JourneyCreateInput!, update: JourneyUpdateInput!, where: JourneyWhereUniqueInput!): Journey!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  aggregateJourney(cursor: JourneyWhereUniqueInput, orderBy: [JourneyOrderByWithRelationInput!], skip: Int, take: Int, where: JourneyWhereInput): AggregateJourney!
  findFirstJourney(cursor: JourneyWhereUniqueInput, distinct: [JourneyScalarFieldEnum!], orderBy: [JourneyOrderByWithRelationInput!], skip: Int, take: Int, where: JourneyWhereInput): Journey
  findFirstJourneyOrThrow(cursor: JourneyWhereUniqueInput, distinct: [JourneyScalarFieldEnum!], orderBy: [JourneyOrderByWithRelationInput!], skip: Int, take: Int, where: JourneyWhereInput): Journey
  getJourney(where: JourneyWhereUniqueInput!): Journey
  groupByJourney(by: [JourneyScalarFieldEnum!]!, having: JourneyScalarWhereWithAggregatesInput, orderBy: [JourneyOrderByWithAggregationInput!], skip: Int, take: Int, where: JourneyWhereInput): [JourneyGroupBy!]!
  journey(where: JourneyWhereUniqueInput!): Journey
  journeys(cursor: JourneyWhereUniqueInput, distinct: [JourneyScalarFieldEnum!], orderBy: [JourneyOrderByWithRelationInput!], skip: Int, take: Int, where: JourneyWhereInput): [Journey!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}